<project name="build" default="all" basedir="..">
    <dirname property="build" file="${ant.file.build}" />

    <!-- user overrides of default properties -->
    <property file="local.build.properties" />
    <property file="build.properties" />

    <!-- default properties and locations -->
    <available file="build-config.xml" property="build-config" value="${basedir}/build-config.xml" />
    <available file="src" property="src" value="${basedir}/src" />
    <available file="lib" property="lib" value="${basedir}/lib" />

    <property name="debug" value="false" />
    <property name="src" location="${basedir}" />
    <property name="asdoc" location="asdoc" />
    <property name="bin" location="bin" />
    <property name="lib" location="${basedir}" />
    <property name="test" location="test" />
    <property name="test.headless" value="false" />
    <property name="build.lib" location="${build}/lib" />
    <property name="build-config" location="${build}/build-config.xml" />
    <property name="test-report" location="test-report" />
    <property name="mxmlc.maxmemory" value="512m" />
    <property name="serve.port" value="8080" />
    <property name="serve.root" value="${bin}" />

    <property environment="env." />
    <property name="FLEX_HOME" value="${env.FLEX_HOME}" />

    <!-- test FLEX_HOME property to fail with a nicer error message -->
    <available file="${FLEX_HOME}" property="FLEX_HOME.available" />
    <fail message="Please define the FLEX_HOME environement variable or build property." unless="${FLEX_HOME.available}" />

    <!-- list of main ActionScript files -->
    <path id="main.path">
        <fileset dir="${src}">
            <include name="*.as" />
            <include name="*.mxml" />
        </fileset>
    </path>

    <pathconvert refid="main.path" property="main.available" setonempty="false" />

    <!--
     Build targets
    -->

    <target name="all" depends="clean, test, audit, asdoc, compile" />

    <target name="compile" depends="compile-init, compile-swfs, compile-swc" />

    <target name="clean">
        <delete dir="${asdoc}" />
        <delete dir="${test-report}"/>
        <delete>
            <fileset dir="${bin}" includes="*.swf" erroronmissingdir="false" />
            <fileset dir="${bin}" includes="*.swc" erroronmissingdir="false" />
        </delete>
        <delete includeemptydirs="true">
            <fileset dir="${bin}" excludes="**/*" erroronmissingdir="false" />
        </delete>
    </target>

    <target name="test">
        <trycatch property="flexunit.failed">
            <try>
                <delete dir="${test-report}" />
                <mkdir dir="${test-report}" />
                <flexunit debug="true" headless="${test.headless}" toDir="${test-report}" verbose="true">
                    <source dir="${src}" />
                    <testSource dir="${test}">
                        <include name="**/*Test.as" />
                        <include name="**/*Test.mxml" />
                    </testSource>
                    <library dir="${build.lib}" />
                    <library dir="${lib}" />
                </flexunit>
                <junitreport todir="${test-report}">
                    <fileset dir="${test-report}">
                        <include name="TEST-*.xml" />
                    </fileset>
                    <report format="frames" todir="${test-report}/html" />
                </junitreport>
                <fail message="Test Failed: see '${test-report}/html/index.html' for details." if="flexunit.failed" />
            </try>
            <catch>
                <fail message="${flexunit.failed}" if="flexunit.failed" />
            </catch>
            <finally>
                <delete file="TestRunner.mxml" />
                <delete file="TestRunner.swf" />
            </finally>
        </trycatch>
    </target>

    <target name="audit">
        <flexpmd sourceDirectory="${src}" outputDirectory="${test-report}" />
        <metrics sourcedirectory="${src}" outputfile="${test-report}/javancss.xml" />
        <cpd minimumTokenCount="50" outputFile="${test-report}/cpd.xml">
            <fileset dir="${src}">
                <include name="**/*.as"/>
                <include name="**/*.mxml"/>
            </fileset>
        </cpd>
    </target>

    <target name="asdoc">
        <asdoc failonerror="true" output="${asdoc}" keep-xml="true" skip-xsl="true">
            <doc-sources path-element="${src}" />
            <compiler.library-path dir="${lib}" append="true">
                <include name="**/*.swc" />
            </compiler.library-path>
            <load-config filename="${build-config}" append="true" />
        </asdoc>
    </target>

    <target name="compile-init">
        <mkdir dir="${bin}" />
    </target>

    <target name="compile-swfs" if="main.available">
        <foreach target="compile-swf" param="file">
            <path refid="main.path" />
        </foreach>
    </target>

    <target name="compile-swf">
        <basename property="name" file="${file}" />
        <propertyregex property="out.name" input="${name}" regexp="^(.*)\..*$" replace="\1.swf" />
        <mxmlc file="${file}" output="${bin}/${out.name}" debug="${debug}" fork="true" maxmemory="${mxmlc.maxmemory}">
            <source-path path-element="${src}" />
            <compiler.library-path dir="${lib}" append="true">
                <include name="**/*.swc" />
            </compiler.library-path>
            <load-config filename="${build-config}" append="true" />
        </mxmlc>
    </target>

    <target name="compile-swc" unless="main.available">
        <antcall target="asdoc" />
        <property name="out.name" value="${bin}/${project.name}-${project.version}.swc" />
        <java jar="${FLEX_HOME}/lib/compc.jar" dir="${FLEX_HOME}/frameworks" fork="true" failonerror="true">
            <arg value="-output=${out.name}" />
            <arg value="-include-sources=${src}" />
            <arg value="-library-path+=${lib}" />
            <arg value="-load-config+=${build-config}" />
        </java>
        <zip destfile="${out.name}" update="true">
            <zipfileset dir="${asdoc}" prefix="docs">
                <include name="*.*"/>
                <exclude name="ASDoc_Config.xml"/>
                <exclude name="overviews.xml"/>
            </zipfileset>
        </zip>
    </target>

    <target name="publish" depends="compile">
        <fail message="Please define the publish property." unless="publish" />
        <scp todir="${publish}" sftp="true" trust="true">
            <fileset dir="${bin}" />
        </scp>
    </target>

    <target name="serve">
        <condition property="os-ext" value=".exe">
            <os family="windows" />
        </condition>
        <condition property="os-ext" value=".mac">
            <and> <os family="unix" /> <os family="mac" /> </and>
        </condition>
        <condition property="os-ext" value=".linux">
            <os family="unix" />
        </condition>
        <echo>Serving ${serve.root} on http://localhost:${serve.port} ...</echo>
        <exec executable="${build.lib}/mongoose-3.1${os-ext}">
            <arg line="-r ${serve.root} -p ${serve.port}" />
        </exec>
    </target>


    <!--
     Boring Stuff Above
    -->

    <taskdef resource="flexTasks.tasks" classpath="${FLEX_HOME}/ant/lib/flexTasks.jar" />
    <taskdef resource="flexUnitTasks.tasks" classpath="${build.lib}/flexUnitTasks-4.1.0-8.jar" />
    <taskdef name="flexpmd" classname="com.adobe.ac.pmd.ant.FlexPmdAntTask" classpath="${build.lib}/flex-pmd-ant-task-1.2.jar">
        <classpath>
            <pathelement location="${build.lib}/flex-pmd-ruleset-api-1.2.jar"/>
            <pathelement location="${build.lib}/flex-pmd-ruleset-1.2.jar"/>
            <pathelement location="${build.lib}/flex-pmd-core-1.2.jar"/>
            <pathelement location="${build.lib}/as3-plugin-utils-1.2.jar"/>
            <pathelement location="${build.lib}/as3-parser-1.2.jar"/>
            <pathelement location="${build.lib}/pmd-4.2.5.jar"/>
            <pathelement location="${build.lib}/commons-lang-2.4.jar"/>
            <pathelement location="${build.lib}/flex-pmd-files-1.2.jar"/>
            <pathelement location="${build.lib}/as3-parser-api-1.2.jar"/>
            <pathelement location="${build.lib}/plexus-utils-1.0.2.jar"/>
        </classpath>
    </taskdef>
    <taskdef name="metrics" classname="com.adobe.ac.pmd.metrics.ant.FlexMetricsAntTask"
        classpath="${build.lib}/flex-pmd-metrics-ant-task-1.2.jar">
        <classpath>
            <pathelement location="${build.lib}/flex-pmd-files-1.2.jar" />
            <pathelement location="${build.lib}/flex-pmd-metrics-1.2.jar" />
            <pathelement location="${build.lib}/as3-plugin-utils-1.2.jar" />
            <pathelement location="${build.lib}/as3-parser-1.2.jar" />
            <pathelement location="${build.lib}/as3-parser-api-1.2.jar" />
            <pathelement location="${build.lib}/commons-lang-2.4.jar" />
            <pathelement location="${build.lib}/flex-pmd-ruleset-api-1.2.jar" />
            <pathelement location="${build.lib}/pmd-4.2.5.jar" />
            <pathelement location="${build.lib}/dom4j-1.6.1.jar"/>
        </classpath>
    </taskdef> 
    <taskdef name="cpd" classname="com.adobe.ac.cpd.ant.FlexCpdAntTask"
        classpath="${build.lib}/flex-pmd-cpd-ant-task-1.2.jar">
        <classpath>
            <pathelement location="${build.lib}/flex-pmd-files-1.2.jar" />
            <pathelement location="${build.lib}/flex-pmd-cpd-1.2.jar" />
            <pathelement location="${build.lib}/as3-plugin-utils-1.2.jar" />
            <pathelement location="${build.lib}/as3-parser-1.2.jar" />
            <pathelement location="${build.lib}/as3-parser-api-1.2.jar" />
            <pathelement location="${build.lib}/pmd-4.2.5.jar" />
        </classpath>
    </taskdef>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${build.lib}/ant-contrib-0.6.jar"/>
        </classpath>
    </taskdef>
</project>
